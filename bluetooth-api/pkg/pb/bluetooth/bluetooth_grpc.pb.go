// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bluetooth.proto

package bluetooth

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bluetooth_Search_FullMethodName             = "/Bluetooth/Search"
	Bluetooth_Blink_FullMethodName              = "/Bluetooth/Blink"
	Bluetooth_RegisterDevice_FullMethodName     = "/Bluetooth/RegisterDevice"
	Bluetooth_UnregisterDevice_FullMethodName   = "/Bluetooth/UnregisterDevice"
	Bluetooth_DevicesList_FullMethodName        = "/Bluetooth/DevicesList"
	Bluetooth_GetDevicesFullInfo_FullMethodName = "/Bluetooth/GetDevicesFullInfo"
	Bluetooth_GetTemperature_FullMethodName     = "/Bluetooth/GetTemperature"
)

// BluetoothClient is the client API for Bluetooth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BluetoothClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Blink(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UnregisterDevice(ctx context.Context, in *UnregisterDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DevicesList(ctx context.Context, in *DevicesListRequest, opts ...grpc.CallOption) (*DevicesListResponse, error)
	GetDevicesFullInfo(ctx context.Context, in *GetDevicesFullInfoRequest, opts ...grpc.CallOption) (*GetDevicesFullInfoResponse, error)
	GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error)
}

type bluetoothClient struct {
	cc grpc.ClientConnInterface
}

func NewBluetoothClient(cc grpc.ClientConnInterface) BluetoothClient {
	return &bluetoothClient{cc}
}

func (c *bluetoothClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, Bluetooth_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothClient) Blink(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Bluetooth_Blink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Bluetooth_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothClient) UnregisterDevice(ctx context.Context, in *UnregisterDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Bluetooth_UnregisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothClient) DevicesList(ctx context.Context, in *DevicesListRequest, opts ...grpc.CallOption) (*DevicesListResponse, error) {
	out := new(DevicesListResponse)
	err := c.cc.Invoke(ctx, Bluetooth_DevicesList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothClient) GetDevicesFullInfo(ctx context.Context, in *GetDevicesFullInfoRequest, opts ...grpc.CallOption) (*GetDevicesFullInfoResponse, error) {
	out := new(GetDevicesFullInfoResponse)
	err := c.cc.Invoke(ctx, Bluetooth_GetDevicesFullInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothClient) GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error) {
	out := new(GetTemperatureResponse)
	err := c.cc.Invoke(ctx, Bluetooth_GetTemperature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluetoothServer is the server API for Bluetooth service.
// All implementations must embed UnimplementedBluetoothServer
// for forward compatibility
type BluetoothServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Blink(context.Context, *empty.Empty) (*empty.Empty, error)
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*empty.Empty, error)
	UnregisterDevice(context.Context, *UnregisterDeviceRequest) (*empty.Empty, error)
	DevicesList(context.Context, *DevicesListRequest) (*DevicesListResponse, error)
	GetDevicesFullInfo(context.Context, *GetDevicesFullInfoRequest) (*GetDevicesFullInfoResponse, error)
	GetTemperature(context.Context, *GetTemperatureRequest) (*GetTemperatureResponse, error)
	mustEmbedUnimplementedBluetoothServer()
}

// UnimplementedBluetoothServer must be embedded to have forward compatible implementations.
type UnimplementedBluetoothServer struct {
}

func (UnimplementedBluetoothServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedBluetoothServer) Blink(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blink not implemented")
}
func (UnimplementedBluetoothServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedBluetoothServer) UnregisterDevice(context.Context, *UnregisterDeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterDevice not implemented")
}
func (UnimplementedBluetoothServer) DevicesList(context.Context, *DevicesListRequest) (*DevicesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicesList not implemented")
}
func (UnimplementedBluetoothServer) GetDevicesFullInfo(context.Context, *GetDevicesFullInfoRequest) (*GetDevicesFullInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesFullInfo not implemented")
}
func (UnimplementedBluetoothServer) GetTemperature(context.Context, *GetTemperatureRequest) (*GetTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}
func (UnimplementedBluetoothServer) mustEmbedUnimplementedBluetoothServer() {}

// UnsafeBluetoothServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BluetoothServer will
// result in compilation errors.
type UnsafeBluetoothServer interface {
	mustEmbedUnimplementedBluetoothServer()
}

func RegisterBluetoothServer(s grpc.ServiceRegistrar, srv BluetoothServer) {
	s.RegisterService(&Bluetooth_ServiceDesc, srv)
}

func _Bluetooth_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bluetooth_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bluetooth_Blink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).Blink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bluetooth_Blink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).Blink(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bluetooth_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bluetooth_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bluetooth_UnregisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).UnregisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bluetooth_UnregisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).UnregisterDevice(ctx, req.(*UnregisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bluetooth_DevicesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).DevicesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bluetooth_DevicesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).DevicesList(ctx, req.(*DevicesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bluetooth_GetDevicesFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesFullInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).GetDevicesFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bluetooth_GetDevicesFullInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).GetDevicesFullInfo(ctx, req.(*GetDevicesFullInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bluetooth_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bluetooth_GetTemperature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).GetTemperature(ctx, req.(*GetTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bluetooth_ServiceDesc is the grpc.ServiceDesc for Bluetooth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bluetooth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bluetooth",
	HandlerType: (*BluetoothServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Bluetooth_Search_Handler,
		},
		{
			MethodName: "Blink",
			Handler:    _Bluetooth_Blink_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _Bluetooth_RegisterDevice_Handler,
		},
		{
			MethodName: "UnregisterDevice",
			Handler:    _Bluetooth_UnregisterDevice_Handler,
		},
		{
			MethodName: "DevicesList",
			Handler:    _Bluetooth_DevicesList_Handler,
		},
		{
			MethodName: "GetDevicesFullInfo",
			Handler:    _Bluetooth_GetDevicesFullInfo_Handler,
		},
		{
			MethodName: "GetTemperature",
			Handler:    _Bluetooth_GetTemperature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bluetooth.proto",
}
